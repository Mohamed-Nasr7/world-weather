{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","query","setQuery","temperature","setTemperature","api","calcCelisus","kelvinTemp","Math","round","className","undefined","main","temp","type","placeholder","value","onChange","e","target","onKeyPress","key","fetch","then","res","json","name","sys","country","String","Date","slice","src","weather","icon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wKAuEeA,MApEf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGyBF,mBAAS,IAHlC,mBAGNG,EAHM,KAGOC,EAHP,KAKPC,EACC,mCADDA,EAEK,0CAgBLC,EAAc,SAACC,GACnB,OAAOC,KAAKC,MAAMF,EAAa,SAIjC,OACE,yBAAKG,eAA+BC,GAApBR,EAAYS,KAAoB,MAASN,EAAYH,EAAYS,KAAKC,MAAQ,GAAK,WAAa,YAC9G,8BAEE,yBAAKH,UAAU,cACb,2BACEI,KAAK,OACLJ,UAAU,aACVK,YAAY,iBACZC,MAAOf,EACPgB,SAAU,SAAAC,GAAC,OAAIhB,EAASgB,EAAEC,OAAOH,QACjCI,WA7BK,SAACF,GACD,UAAVA,EAAEG,KAEHC,MAAM,GAAD,OAAIjB,EAAJ,sBAA6BJ,EAA7B,kBAA4CI,IAC9CkB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJpB,EAAeoB,GACftB,EAAS,gBA2BUS,GAApBR,EAAYS,KAAoB,GAC/B,6BACE,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,YAAYP,EAAYuB,KAAvC,MAAgDvB,EAAYwB,IAAIC,SAChE,yBAAKlB,UAAU,QACZmB,OAAO,IAAIC,MAAQC,MAAM,EAAG,MAKjC,yBAAKrB,UAAU,eACb,yBAAKA,UAAU,QAAQJ,EAAYH,EAAYS,KAAKC,MAApD,SACA,iCAAM,yBAAKmB,IAAG,2CAAsC7B,EAAY8B,QAAQ,GAAGC,KAA7D,aAAd,KACA,yBAAKxB,UAAU,WAAf,IAA2BP,EAAY8B,QAAQ,GAAGrB,KAAlD,UChDMuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b7f2b0d7.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const [query, setQuery] = useState('')\n  const [temperature, setTemperature] = useState({});\n\n  const api = {\n    key: \"02fb28458ed00ab88f68b06695b72173\",\n    baseUrl: \"http://api.openweathermap.org/data/2.5/\"\n  }\n\n  const search = (e) => {\n    if(e.key === 'Enter'){\n\n      fetch(`${api.baseUrl}/weather?q=${query}&appid=${api.key}`)\n        .then(res => res.json())\n        .then(res =>{ \n          setTemperature(res);\n          setQuery('');\n        });\n    }\n\n  }\n  \n  const calcCelisus = (kelvinTemp) => {\n    return Math.round(kelvinTemp - 273.15);\n  }\n\n\n  return (\n    <div className={temperature.main == undefined ? 'app' :  calcCelisus(temperature.main.temp) > 20 ? 'app warm' : 'app cold'}>\n      <main>\n        \n        <div className=\"search-box\">\n          <input \n            type=\"text\" \n            className=\"search-bar\" \n            placeholder=\"Search City...\"\n            value={query}\n            onChange={e => setQuery(e.target.value)}\n            onKeyPress={search}\n          />\n        </div>\n\n\n        {temperature.main == undefined ? '' : (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">{temperature.name} , {temperature.sys.country}</div>\n              <div className=\"date\">\n                {String(new Date()).slice(0, 16)}\n              </div>\n              \n            </div>\n            \n            <div className=\"weather-box\">\n              <div className=\"temp\">{calcCelisus(temperature.main.temp)}Â°C</div>\n              <div> <img src={`http://openweathermap.org/img/wn/${temperature.weather[0].icon}@2x.png`} /> </div>\n              <div className=\"weather\"> {temperature.weather[0].main} </div>\n            </div>\n            \n          </div>\n        )}\n        \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}